#include "crypto/Ripemd.h"
#include "crypto/Sha1.h"
#include "crypto/Sha256.h"
#include "utility/Utility.h"
#include <cstdio>

int TestRipemd160();
int TestSha1();
int TestSha256();

using namespace Crypto;
using namespace Utility;

int TestCrypto()
{
    printf("Crypto\n");
    int errors = 0;
    errors += TestRipemd160();
    errors += TestSha256();
    errors += TestSha1();
    return errors;
}
struct Ripemd160TestCase
{
    char const * input;
    uint8_t expected[RIPEMD160_HASH_SIZE];
};

static Ripemd160TestCase const RIPEMD160_CASES[] =
{
    {
        "",
        { 0x9c, 0x11, 0x85, 0xa5, 0xc5, 0xe9, 0xfc, 0x54, 0x61, 0x28, 0x08, 0x97, 0x7e, 0xe8, 0xf5, 0x48, 0xb2, 0x25, 0x8d, 0x31 }
    },
    {
        "a",
        { 0x0b, 0xdc, 0x9d, 0x2d, 0x25, 0x6b, 0x3e, 0xe9, 0xda, 0xae, 0x34, 0x7b, 0xe6, 0xf4, 0xdc, 0x83, 0x5a, 0x46, 0x7f, 0xfe }
    },
    {
        "abc",
        { 0x8e, 0xb2, 0x08, 0xf7, 0xe0, 0x5d, 0x98, 0x7a, 0x9b, 0x04, 0x4a, 0x8e, 0x98, 0xc6, 0xb0, 0x87, 0xf1, 0x5a, 0x0b, 0xfc }
    },
    {
        "message digest",
        { 0x5d, 0x06, 0x89, 0xef, 0x49, 0xd2, 0xfa, 0xe5, 0x72, 0xb8, 0x81, 0xb1, 0x23, 0xa8, 0x5f, 0xfa, 0x21, 0x59, 0x5f, 0x36 }
    },
    {
        "abcdefghijklmnopqrstuvwxyz",
        { 0xf7, 0x1c, 0x27, 0x10, 0x9c, 0x69, 0x2c, 0x1b, 0x56, 0xbb, 0xdc, 0xeb, 0x5b, 0x9d, 0x28, 0x65, 0xb3, 0x70, 0x8d, 0xbc }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        { 0x12, 0xa0, 0x53, 0x38, 0x4a, 0x9c, 0x0c, 0x88, 0xe4, 0x05, 0xa0, 0x6c, 0x27, 0xdc, 0xf4, 0x9a, 0xda, 0x62, 0xeb, 0x2b }
    },
    {
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        { 0xb0, 0xe2, 0x0b, 0x6e, 0x31, 0x16, 0x64, 0x02, 0x86, 0xed, 0x3a, 0x87, 0xa5, 0x71, 0x30, 0x79, 0xb2, 0x1f, 0x51, 0x89 }
    },
    {
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
        { 0x9b, 0x75, 0x2e, 0x45, 0x57, 0x3d, 0x4b, 0x39, 0xf4, 0xdb, 0xd3, 0x32, 0x3c, 0xab, 0x82, 0xbf, 0x63, 0x32, 0x6b, 0xfb }
    }
};

int TestRipemd160()
{
    printf("+-- Ripemd160\n");
    int errors = 0;

    printf("    +-- testing ripemd160(uint8_t const * input, size_t length)\n");

    for (auto c : RIPEMD160_CASES)
    {
        std::string name = shorten(c.input);

        Ripemd160Hash result = ripemd160((uint8_t const *)c.input, strlen(c.input));
        if (result.size() != RIPEMD160_HASH_SIZE)
        {
            printf("        +== %s: expected size = %u, got size = %u\n", name.c_str(), (unsigned)RIPEMD160_HASH_SIZE, (unsigned)result.size());
            ++errors;
        }
        else if (!std::equal(result.begin(), result.end(), c.expected))
        {
            printf("        +== %s: expected \"%s\", got \"%s\"\n", name.c_str(), vtox(result).c_str(), vtox(c.expected, RIPEMD160_HASH_SIZE).c_str());
            ++errors;
        }
        else
        {
            printf("        +-- %s: ok\n", name.c_str());
        }
    }

    return errors;
}
struct Sha256TestCase
{
    char const * input;
    uint8_t expected[SHA256_HASH_SIZE];
};

static Sha256TestCase const SHA256_CASES[] =
{
    {
        "",
        {
            0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
            0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
        }
    },
    {
        "abc",
        {
            0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
            0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
        }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        {
            0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
            0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
        }
    },
    {
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        {
            0xcf, 0x5b, 0x16, 0xa7, 0x78, 0xaf, 0x83, 0x80, 0x03, 0x6c, 0xe5, 0x9e, 0x7b, 0x04, 0x92, 0x37,
            0x0b, 0x24, 0x9b, 0x11, 0xe8, 0xf0, 0x7a, 0x51, 0xaf, 0xac, 0x45, 0x03, 0x7a, 0xfe, 0xe9, 0xd1
        }
    }
};

int TestSha256()
{
    printf("+-- Sha256\n");
    int errors = 0;

    printf("    +-- testing sha256(uint8_t const * input, size_t length)\n");

    for (auto c : SHA256_CASES)
    {
        std::string name = shorten(c.input);

        Sha256Hash result = sha256((uint8_t const *)c.input, strlen(c.input));
        if (result.size() != SHA256_HASH_SIZE)
        {
            printf("        +== %s: expected size = %u, got size = %u\n", name.c_str(), (unsigned)SHA256_HASH_SIZE, (unsigned)result.size());
            ++errors;
        }
        else if (!std::equal(result.begin(), result.end(), c.expected))
        {
            printf("        +== %s: expected \"%s\", got \"%s\"\n", name.c_str(), vtox(result).c_str(), vtox(c.expected, SHA256_HASH_SIZE).c_str());
            ++errors;
        }
        else
        {
            printf("        +-- %s: ok\n", name.c_str());
        }
    }

    return errors;
}
struct Sha1TestCase
{
    char const * input;
    uint8_t expected[SHA1_HASH_SIZE];
};

static Sha1TestCase const SHA1_CASES[] =
{
    {
        "",
        { 0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09 }
    },
    {
        "a",
        { 0x86, 0xf7, 0xe4, 0x37, 0xfa, 0xa5, 0xa7, 0xfc, 0xe1, 0x5d, 0x1d, 0xdc, 0xb9, 0xea, 0xea, 0xea, 0x37, 0x76, 0x67, 0xb8 }
    },
    {
        "abc",
        { 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d }
    },
    {
        "message digest",
        { 0xc1, 0x22, 0x52, 0xce, 0xda, 0x8b, 0xe8, 0x99, 0x4d, 0x5f, 0xa0, 0x29, 0x0a, 0x47, 0x23, 0x1c, 0x1d, 0x16, 0xaa, 0xe3 }
    },
    {
        "abcdefghijklmnopqrstuvwxyz",
        { 0x32, 0xd1, 0x0c, 0x7b, 0x8c, 0xf9, 0x65, 0x70, 0xca, 0x04, 0xce, 0x37, 0xf2, 0xa1, 0x9d, 0x84, 0x24, 0x0d, 0x3a, 0x89 }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        { 0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae, 0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1 }
    },
    {
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        { 0x76, 0x1c, 0x45, 0x7b, 0xf7, 0x3b, 0x14, 0xd2, 0x7e, 0x9e, 0x92, 0x65, 0xc4, 0x6f, 0x4b, 0x4d, 0xda, 0x11, 0xf9, 0x40 }
    },
    {
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
        { 0x50, 0xab, 0xf5, 0x70, 0x6a, 0x15, 0x09, 0x90, 0xa0, 0x8b, 0x2c, 0x5e, 0xa4, 0x0f, 0xa0, 0xe5, 0x85, 0x55, 0x47, 0x32 }
    }
};

int TestSha1()
{
    printf("+-- Sha1\n");
    int errors = 0;

    printf("    +-- testing sha1(uint8_t const * input, size_t length)\n");

    for (auto c : SHA1_CASES)
    {
        std::string name = shorten(c.input);

        Sha1Hash result = sha1((uint8_t const *)c.input, strlen(c.input));
        if (result.size() != SHA1_HASH_SIZE)
        {
            printf("        +== %s: expected size = %u, got size = %u\n", name.c_str(), (unsigned)SHA1_HASH_SIZE, (unsigned)result.size());
            ++errors;
        }
        else if (!std::equal(result.begin(), result.end(), c.expected))
        {
            printf("        +== %s: expected \"%s\", got \"%s\"\n", name.c_str(), vtox(result).c_str(), vtox(c.expected, SHA1_HASH_SIZE).c_str());
            ++errors;
        }
        else
        {
            printf("        +-- %s: ok\n", name.c_str());
        }
    }

    return errors;
}
