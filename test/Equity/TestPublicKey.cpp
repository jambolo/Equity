#include "equity/PublicKey.h"
#include "equity/PrivateKey.h"
#include "utility/Utility.h"

#include <string>
#include <vector>
#include <cstdio>

using namespace Equity;


int TestPublicKey()
{
    int errors = 0;

    printf("+-- PublicKey\n");

    printf("    +-- testing: PublicKey(uint8_t const * k)\n");

   struct PublicKeyInput
    {
        uint8_t data[PublicKey::SIZE];
    };

    static PublicKeyInput PUBLIC_KEY_CASES[] =
    {
        { { 0x04,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        } },
        { { 0x04,
            0x78, 0xD4, 0x30, 0x27, 0x4F, 0x8C, 0x5E, 0xC1, 0x32, 0x13, 0x38, 0x15, 0x1E, 0x9F, 0x27, 0xF4,
            0xC6, 0x76, 0xA0, 0x08, 0xBD, 0xF8, 0x63, 0x8D, 0x07, 0xC0, 0xB6, 0xBE, 0x9A, 0xB3, 0x5C, 0x71,
            0xA1, 0x51, 0x80, 0x63, 0x24, 0x3A, 0xCD, 0x4D, 0xFE, 0x96, 0xB6, 0x6E, 0x3F, 0x2E, 0xC8, 0x01,
            0x3C, 0x8E, 0x07, 0x2C, 0xD0, 0x9B, 0x38, 0x34, 0xA1, 0x9F, 0x81, 0xF6, 0x59, 0xCC, 0x34, 0x55
        } }
    };

    for (auto c : PUBLIC_KEY_CASES)
    {
        PublicKey result(c.data);
        std::vector<uint8_t> value = result.value();

        if (!result.valid())
        {
            printf("        +== %s: not valid\n", Utility::shorten(Utility::toHex(c.data, PublicKey::SIZE)).c_str());
            ++errors;
        }
        else if (value.size() != PublicKey::SIZE)
        {
            printf("        +== %s: expected size = %u, got size = %u\n", Utility::shorten(Utility::toHex(c.data, PublicKey::SIZE)).c_str(), (unsigned)PublicKey::SIZE, (unsigned)value.size());
            ++errors;
        }
        else if (!std::equal(value.begin(), value.end(), c.data))
        {
            printf("        +== %s: expected \"%s\", got \"%s\"\n", Utility::shorten(Utility::toHex(c.data, PublicKey::SIZE)).c_str(), Utility::toHex(c.data, PublicKey::SIZE).c_str(), Utility::toHex(value).c_str());
            ++errors;
        }
        else
        {
            printf("        +-- %s: ok\n", Utility::shorten(Utility::toHex(c.data, PublicKey::SIZE)).c_str());
        }
    }

    printf("    +-- testing: PublicKey(PrivateKey const & k)\n");

    struct PrivateKeyInput
    {
        uint8_t privateKey[PrivateKey::SIZE];
        uint8_t expected[PublicKey::SIZE];
    };

    static PrivateKeyInput PRIVATE_KEY_CASES[] =
    {
        {
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 0x04,
              0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07,
              0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98,
              0x48, 0x3A, 0xDA, 0x77, 0x26, 0xA3, 0xC4, 0x65, 0x5D, 0xA4, 0xFB, 0xFC, 0x0E, 0x11, 0x08, 0xA8,
              0xFD, 0x17, 0xB4, 0x48, 0xA6, 0x85, 0x54, 0x19, 0x9C, 0x47, 0xD0, 0x8F, 0xFB, 0x10, 0xD4, 0xB8
            }
        },
        {
            { 0xBB, 0x14, 0x75, 0x9F, 0x05, 0x88, 0xA2, 0x9C, 0x68, 0x09, 0xF9, 0xAD, 0x79, 0xE1, 0x22, 0x3A, 0x61, 0xED, 0xE7, 0x2A, 0x79, 0xC9, 0xBE, 0x53, 0xFC, 0x8D, 0x57, 0xD1, 0x47, 0x46, 0x36, 0xDB },
            { 0x04,
              0x20, 0x30, 0xE5, 0x71, 0x8A, 0x45, 0x33, 0x62, 0xA2, 0x98, 0xE2, 0x1B, 0xAD, 0x0A, 0x23, 0x9C,
              0xB2, 0x62, 0x41, 0x7D, 0x3F, 0xC3, 0x78, 0x1C, 0x76, 0xFE, 0x38, 0xD6, 0xEE, 0xFC, 0x50, 0x00,
              0x0B, 0x7D, 0x63, 0x29, 0x0F, 0xDB, 0xB0, 0x49, 0xF7, 0xA3, 0xF1, 0x3B, 0xE7, 0xC8, 0xA1, 0x6C,
              0x2F, 0x37, 0x66, 0x34, 0xF6, 0x41, 0x97, 0x3C, 0x32, 0x7C, 0x09, 0x45, 0xDB, 0xA4, 0x8C, 0x63
            }
        },
        {
            { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x40 },
            { 0x04,
              0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07,
              0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98,
              0xB7, 0xC5, 0x25, 0x88, 0xD9, 0x5C, 0x3B, 0x9A, 0xA2, 0x5B, 0x04, 0x03, 0xF1, 0xEE, 0xF7, 0x57,
              0x02, 0xE8, 0x4B, 0xB7, 0x59, 0x7A, 0xAB, 0xE6, 0x63, 0xB8, 0x2F, 0x6F, 0x04, 0xEF, 0x27, 0x77
            }
        }
    };

    for (auto c : PRIVATE_KEY_CASES)
    {
        PublicKey result(PrivateKey(c.privateKey));
        std::vector<uint8_t> value = result.value();

        if (!result.valid())
        {
            printf("        +== %s: not valid\n", Utility::shorten(Utility::toHex(c.privateKey, PrivateKey::SIZE)).c_str());
            ++errors;
        }
        else if (value.size() != PublicKey::SIZE)
        {
            printf("        +== %s: expected size = %u, got size = %u\n", Utility::shorten(Utility::toHex(c.privateKey, PrivateKey::SIZE)).c_str(), (unsigned)PublicKey::SIZE, (unsigned)value.size());
            ++errors;
        }
        else if (!std::equal(value.begin(), value.end(), c.expected))
        {
            printf("        +== %s: expected \"%s\", got \"%s\"\n", Utility::shorten(Utility::toHex(c.privateKey, PrivateKey::SIZE)).c_str(), Utility::toHex(c.expected, PublicKey::SIZE).c_str(), Utility::toHex(value).c_str());
            ++errors;
        }
        else
        {
            printf("        +-- %s: ok\n", Utility::shorten(Utility::toHex(c.privateKey, PrivateKey::SIZE)).c_str());
        }
    }

    return errors;
}
