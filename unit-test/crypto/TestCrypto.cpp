#include "../targetver.h"
#include "CppUnitTest.h"

#include "crypto/Hmac.h"
#include "crypto/Pbkdf2.h"
#include "crypto/Ripemd.h"
#include "crypto/Sha1.h"
#include "crypto/Sha256.h"
#include "crypto/Sha512.h"
#include "utility/Utility.h"
#include <cstdio>

using namespace Crypto;
using namespace Utility;
using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace TestCrypto
{

struct Sha256TestCase
{
    char const * input;
    uint8_t expected[SHA256_HASH_SIZE];
};

static Sha256TestCase const SHA256_CASES[] =
{
    {
        "",
        {
            0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
            0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
        }
    },
    {
        "abc",
        {
            0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
            0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
        }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        {
            0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
            0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
        }
    },
    {
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        {
            0xcf, 0x5b, 0x16, 0xa7, 0x78, 0xaf, 0x83, 0x80, 0x03, 0x6c, 0xe5, 0x9e, 0x7b, 0x04, 0x92, 0x37,
            0x0b, 0x24, 0x9b, 0x11, 0xe8, 0xf0, 0x7a, 0x51, 0xaf, 0xac, 0x45, 0x03, 0x7a, 0xfe, 0xe9, 0xd1
        }
    }
};

struct Ripemd160TestCase
{
    char const * input;
    uint8_t expected[RIPEMD160_HASH_SIZE];
};

static Ripemd160TestCase const RIPEMD160_CASES[] =
{
    {
        "",
        { 0x9c, 0x11, 0x85, 0xa5, 0xc5, 0xe9, 0xfc, 0x54, 0x61, 0x28, 0x08, 0x97, 0x7e, 0xe8, 0xf5, 0x48, 0xb2, 0x25, 0x8d, 0x31 }
    },
    {
        "a",
        { 0x0b, 0xdc, 0x9d, 0x2d, 0x25, 0x6b, 0x3e, 0xe9, 0xda, 0xae, 0x34, 0x7b, 0xe6, 0xf4, 0xdc, 0x83, 0x5a, 0x46, 0x7f, 0xfe }
    },
    {
        "abc",
        { 0x8e, 0xb2, 0x08, 0xf7, 0xe0, 0x5d, 0x98, 0x7a, 0x9b, 0x04, 0x4a, 0x8e, 0x98, 0xc6, 0xb0, 0x87, 0xf1, 0x5a, 0x0b, 0xfc }
    },
    {
        "message digest",
        { 0x5d, 0x06, 0x89, 0xef, 0x49, 0xd2, 0xfa, 0xe5, 0x72, 0xb8, 0x81, 0xb1, 0x23, 0xa8, 0x5f, 0xfa, 0x21, 0x59, 0x5f, 0x36 }
    },
    {
        "abcdefghijklmnopqrstuvwxyz",
        { 0xf7, 0x1c, 0x27, 0x10, 0x9c, 0x69, 0x2c, 0x1b, 0x56, 0xbb, 0xdc, 0xeb, 0x5b, 0x9d, 0x28, 0x65, 0xb3, 0x70, 0x8d, 0xbc }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        { 0x12, 0xa0, 0x53, 0x38, 0x4a, 0x9c, 0x0c, 0x88, 0xe4, 0x05, 0xa0, 0x6c, 0x27, 0xdc, 0xf4, 0x9a, 0xda, 0x62, 0xeb, 0x2b }
    },
    {
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        { 0xb0, 0xe2, 0x0b, 0x6e, 0x31, 0x16, 0x64, 0x02, 0x86, 0xed, 0x3a, 0x87, 0xa5, 0x71, 0x30, 0x79, 0xb2, 0x1f, 0x51, 0x89 }
    },
    {
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
        { 0x9b, 0x75, 0x2e, 0x45, 0x57, 0x3d, 0x4b, 0x39, 0xf4, 0xdb, 0xd3, 0x32, 0x3c, 0xab, 0x82, 0xbf, 0x63, 0x32, 0x6b, 0xfb }
    }
};

struct DoubleSha256TestCase
{
    char const * input;
    uint8_t expected[SHA256_HASH_SIZE];
};

static DoubleSha256TestCase const DOUBLE_SHA256_CASES[] =
{
    {
        "",
        {
            0x5d, 0xf6, 0xe0, 0xe2, 0x76, 0x13, 0x59, 0xd3, 0x0a, 0x82, 0x75, 0x05, 0x8e, 0x29, 0x9f, 0xcc,
            0x03, 0x81, 0x53, 0x45, 0x45, 0xf5, 0x5c, 0xf4, 0x3e, 0x41, 0x98, 0x3f, 0x5d, 0x4c, 0x94, 0x56
        }
    },
    {
        "abc",
        {
            0x4f, 0x8b, 0x42, 0xc2, 0x2d, 0xd3, 0x72, 0x9b, 0x51, 0x9b, 0xa6, 0xf6, 0x8d, 0x2d, 0xa7, 0xcc,
            0x5b, 0x2d, 0x60, 0x6d, 0x05, 0xda, 0xed, 0x5a, 0xd5, 0x12, 0x8c, 0xc0, 0x3e, 0x6c, 0x63, 0x58
        }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        {
            0x0c, 0xff, 0xe1, 0x7f, 0x68, 0x95, 0x4d, 0xac, 0x3a, 0x84, 0xfb, 0x14, 0x58, 0xbd, 0x5e, 0xc9,
            0x92, 0x09, 0x44, 0x97, 0x49, 0xb2, 0xb3, 0x08, 0xb7, 0xcb, 0x55, 0x81, 0x2f, 0x95, 0x63, 0xaf
        }
    },
    {
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        {
            0xac, 0xcd, 0x7b, 0xd1, 0xcb, 0x0f, 0xcb, 0xd8, 0x5c, 0xf0, 0xba, 0x5b, 0xa9, 0x69, 0x45, 0x12,
            0x77, 0x76, 0x37, 0x3a, 0x7d, 0x47, 0x89, 0x1e, 0xb4, 0x3e, 0xd6, 0xb1, 0xe2, 0xee, 0x60, 0xfe
        }
    }
};

struct Sha1TestCase
{
    char const * input;
    uint8_t expected[SHA1_HASH_SIZE];
};

static Sha1TestCase const SHA1_CASES[] =
{
    {
        "",
        { 0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09 }
    },
    {
        "a",
        { 0x86, 0xf7, 0xe4, 0x37, 0xfa, 0xa5, 0xa7, 0xfc, 0xe1, 0x5d, 0x1d, 0xdc, 0xb9, 0xea, 0xea, 0xea, 0x37, 0x76, 0x67, 0xb8 }
    },
    {
        "abc",
        { 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d }
    },
    {
        "message digest",
        { 0xc1, 0x22, 0x52, 0xce, 0xda, 0x8b, 0xe8, 0x99, 0x4d, 0x5f, 0xa0, 0x29, 0x0a, 0x47, 0x23, 0x1c, 0x1d, 0x16, 0xaa, 0xe3 }
    },
    {
        "abcdefghijklmnopqrstuvwxyz",
        { 0x32, 0xd1, 0x0c, 0x7b, 0x8c, 0xf9, 0x65, 0x70, 0xca, 0x04, 0xce, 0x37, 0xf2, 0xa1, 0x9d, 0x84, 0x24, 0x0d, 0x3a, 0x89 }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        { 0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae, 0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1 }
    },
    {
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        { 0x76, 0x1c, 0x45, 0x7b, 0xf7, 0x3b, 0x14, 0xd2, 0x7e, 0x9e, 0x92, 0x65, 0xc4, 0x6f, 0x4b, 0x4d, 0xda, 0x11, 0xf9, 0x40 }
    },
    {
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
        { 0x50, 0xab, 0xf5, 0x70, 0x6a, 0x15, 0x09, 0x90, 0xa0, 0x8b, 0x2c, 0x5e, 0xa4, 0x0f, 0xa0, 0xe5, 0x85, 0x55, 0x47, 0x32 }
    }
};

struct Sha512TestCase
{
    char const * input;
    uint8_t expected[SHA512_HASH_SIZE];
};

static Sha512TestCase const SHA512_CASES[] =
{
    {
        "",
        {
            0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
            0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
            0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
            0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
        }
    },
    {
        "abc",
        {
            0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73, 0x49, 0xae, 0x20, 0x41, 0x31,
            0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2, 0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a,
            0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8, 0x36, 0xba, 0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd,
            0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e, 0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f
        }
    },
    {
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        {
            0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a, 0x0c, 0xed, 0x7b, 0xeb, 0x8e, 0x08, 0xa4, 0x16,
            0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2, 0x28, 0xa8, 0x27, 0x9b, 0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35,
            0x96, 0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07, 0xf9, 0xaa, 0x1d, 0x3b, 0xea, 0x57, 0x78, 0x9c, 0xa0,
            0x31, 0xad, 0x85, 0xc7, 0xa7, 0x1d, 0xd7, 0x03, 0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45
        }
    },
    {
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        {
            0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda, 0x8c, 0xf4, 0xf7, 0x28, 0x14, 0xfc, 0x14, 0x3f,
            0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f, 0x7f, 0xa1, 0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18,
            0x50, 0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4, 0x33, 0x1b, 0x99, 0xde, 0xc4, 0xb5, 0x43, 0x3a,
            0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26, 0x54, 0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09
        }
    }
};

struct HmacSha512TestCase
{
    char const * key;           // note: in hex
    char const * message;       // note: in hex
    uint8_t expected[SHA512_HASH_SIZE];
};

static HmacSha512TestCase const HMACSHA512_CASES[] =
{
    {
        "0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b",
        "4869205468657265",
        {
            0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d, 0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d, 0x6c, 0xb0,
            0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78, 0x7a, 0xd0, 0xb3, 0x05, 0x45, 0xe1, 0x7c, 0xde,
            0xda, 0xa8, 0x33, 0xb7, 0xd6, 0xb8, 0xa7, 0x02, 0x03, 0x8b, 0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4,
            0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70, 0x2e, 0x69, 0x6c, 0x20, 0x3a, 0x12, 0x68, 0x54
        }
    },
    {
        "4a656665",
        "7768617420646f2079612077616e7420666f72206e6f7468696e673f",
        {
            0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2, 0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56, 0xe0, 0xa3,
            0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6, 0x10, 0x27, 0x0c, 0xd7, 0xea, 0x25, 0x05, 0x54,
            0x97, 0x58, 0xbf, 0x75, 0xc0, 0x5a, 0x99, 0x4a, 0x6d, 0x03, 0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd,
            0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b, 0x63, 0x6e, 0x07, 0x0a, 0x38, 0xbc, 0xe7, 0x37
        }
    },
    {
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        {
            0xfa, 0x73, 0xb0, 0x08, 0x9d, 0x56, 0xa2, 0x84, 0xef, 0xb0, 0xf0, 0x75, 0x6c, 0x89, 0x0b, 0xe9,
            0xb1, 0xb5, 0xdb, 0xdd, 0x8e, 0xe8, 0x1a, 0x36, 0x55, 0xf8, 0x3e, 0x33, 0xb2, 0x27, 0x9d, 0x39,
            0xbf, 0x3e, 0x84, 0x82, 0x79, 0xa7, 0x22, 0xc8, 0x06, 0xb4, 0x85, 0xa4, 0x7e, 0x67, 0xc8, 0x07,
            0xb9, 0x46, 0xa3, 0x37, 0xbe, 0xe8, 0x94, 0x26, 0x74, 0x27, 0x88, 0x59, 0xe1, 0x32, 0x92, 0xfb
        }
    },
    {
        "0102030405060708090a0b0c0d0e0f10111213141516171819",
        "cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd",
        {
            0xb0, 0xba, 0x46, 0x56, 0x37, 0x45, 0x8c, 0x69, 0x90, 0xe5, 0xa8, 0xc5, 0xf6, 0x1d, 0x4a, 0xf7,
            0xe5, 0x76, 0xd9, 0x7f, 0xf9, 0x4b, 0x87, 0x2d, 0xe7, 0x6f, 0x80, 0x50, 0x36, 0x1e, 0xe3, 0xdb,
            0xa9, 0x1c, 0xa5, 0xc1, 0x1a, 0xa2, 0x5e, 0xb4, 0xd6, 0x79, 0x27, 0x5c, 0xc5, 0x78, 0x80, 0x63,
            0xa5, 0xf1, 0x97, 0x41, 0x12, 0x0c, 0x4f, 0x2d, 0xe2, 0xad, 0xeb, 0xeb, 0x10, 0xa2, 0x98, 0xdd
        }
    },
    {
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a65204b6579202d2048617368204b6579204669727374",
        {
            0x80, 0xb2, 0x42, 0x63, 0xc7, 0xc1, 0xa3, 0xeb, 0xb7, 0x14, 0x93, 0xc1, 0xdd, 0x7b, 0xe8, 0xb4,
            0x9b, 0x46, 0xd1, 0xf4, 0x1b, 0x4a, 0xee, 0xc1, 0x12, 0x1b, 0x01, 0x37, 0x83, 0xf8, 0xf3, 0x52,
            0x6b, 0x56, 0xd0, 0x37, 0xe0, 0x5f, 0x25, 0x98, 0xbd, 0x0f, 0xd2, 0x21, 0x5d, 0x6a, 0x1e, 0x52,
            0x95, 0xe6, 0x4f, 0x73, 0xf6, 0x3f, 0x0a, 0xec, 0x8b, 0x91, 0x5a, 0x98, 0x5d, 0x78, 0x65, 0x98
        }
    },
    {
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "5468697320697320612074657374207573696e672061206c6172676572207468616e20626c6f636b2d73697a65206b657920616e642061206c6172676572207468616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565647320746f20626520686173686564206265666f7265206265696e6720757365642062792074686520484d414320616c676f726974686d2e",
        {
            0xe3, 0x7b, 0x6a, 0x77, 0x5d, 0xc8, 0x7d, 0xba, 0xa4, 0xdf, 0xa9, 0xf9, 0x6e, 0x5e, 0x3f, 0xfd,
            0xde, 0xbd, 0x71, 0xf8, 0x86, 0x72, 0x89, 0x86, 0x5d, 0xf5, 0xa3, 0x2d, 0x20, 0xcd, 0xc9, 0x44,
            0xb6, 0x02, 0x2c, 0xac, 0x3c, 0x49, 0x82, 0xb1, 0x0d, 0x5e, 0xeb, 0x55, 0xc3, 0xe4, 0xde, 0x15,
            0x13, 0x46, 0x76, 0xfb, 0x6d, 0xe0, 0x44, 0x60, 0x65, 0xc9, 0x74, 0x40, 0xfa, 0x8c, 0x6a, 0x58
        }
    }
};

struct Pbkdf2HmacSha512TestCase
{
    char const * password;
    char const * salt;
    int count;
    unsigned char expected[64];
};

static Pbkdf2HmacSha512TestCase const PBKDF2HMACSHA512_CASES[] =
{
    {
        "passDATAb00AB7YxDTT",
        "saltKEYbcTcXHCBxtjD",
        1,
        {
            0xCB, 0xE6, 0x08, 0x8A, 0xD4, 0x35, 0x9A, 0xF4, 0x2E, 0x60, 0x3C, 0x2A, 0x33, 0x76, 0x0E, 0xF9,
            0xD4, 0x01, 0x7A, 0x7B, 0x2A, 0xAD, 0x10, 0xAF, 0x46, 0xF9, 0x92, 0xC6, 0x60, 0xA0, 0xB4, 0x61,
            0xEC, 0xB0, 0xDC, 0x2A, 0x79, 0xC2, 0x57, 0x09, 0x41, 0xBE, 0xA6, 0xA0, 0x8D, 0x15, 0xD6, 0x88,
            0x7E, 0x79, 0xF3, 0x2B, 0x13, 0x2E, 0x1C, 0x13, 0x4E, 0x95, 0x25, 0xEE, 0xDD, 0xD7, 0x44, 0xFA
        }
    },
    {
        "passDATAb00AB7YxDTT",
        "saltKEYbcTcXHCBxtjD",
        100000,
        {
            0xAC, 0xCD, 0xCD, 0x87, 0x98, 0xAE, 0x5C, 0xD8, 0x58, 0x04, 0x73, 0x90, 0x15, 0xEF, 0x2A, 0x11, 0xE3, 0x25, 0x91,
            0xB7, 0xB7, 0xD1, 0x6F, 0x76, 0x81, 0x9B, 0x30, 0xB0, 0xD4, 0x9D, 0x80, 0xE1, 0xAB, 0xEA, 0x6C, 0x98, 0x22, 0xB8,
            0x0A, 0x1F, 0xDF, 0xE4, 0x21, 0xE2, 0x6F, 0x56, 0x03, 0xEC, 0xA8, 0xA4, 0x7A, 0x64, 0xC9, 0xA0, 0x04, 0xFB, 0x5A,
            0xF8, 0x22, 0x9F, 0x76, 0x2F, 0xF4,
            0x1F
        }
    },
    {
        "passDATAb00AB7YxDTTl",
        "saltKEYbcTcXHCBxtjD2",
        1,
        {
            0x8E, 0x50, 0x74, 0xA9, 0x51, 0x3C, 0x1F, 0x15, 0x12, 0xC9, 0xB1, 0xDF, 0x1D, 0x8B, 0xFF, 0xA9, 0xD8, 0xB4, 0xEF,
            0x91, 0x05, 0xDF, 0xC1, 0x66, 0x81, 0x22, 0x28, 0x39, 0x56, 0x0F, 0xB6, 0x32, 0x64, 0xBE, 0xD6, 0xAA, 0xBF, 0x76,
            0x1F, 0x18, 0x0E, 0x91, 0x2A, 0x66, 0xE0, 0xB5, 0x3D, 0x65, 0xEC, 0x88, 0xF6, 0xA1, 0x51, 0x9E, 0x14, 0x80, 0x4E,
            0xBA, 0x6D, 0xC9, 0xDF, 0x13, 0x70,
            0x07
        }
    },
    {
        "passDATAb00AB7YxDTTl",
        "saltKEYbcTcXHCBxtjD2",
        100000,
        {
            0x59, 0x42, 0x56, 0xB0, 0xBD, 0x4D, 0x6C, 0x9F, 0x21, 0xA8, 0x7F, 0x7B, 0xA5, 0x77, 0x2A, 0x79, 0x1A, 0x10, 0xE6,
            0x11, 0x06, 0x94, 0xF4, 0x43, 0x65, 0xCD, 0x94, 0x67, 0x0E, 0x57, 0xF1, 0xAE, 0xCD, 0x79, 0x7E, 0xF1, 0xD1, 0x00,
            0x19, 0x38, 0x71, 0x90, 0x44, 0xC7, 0xF0, 0x18, 0x02, 0x66, 0x97, 0x84, 0x5E, 0xB9, 0xAD, 0x97, 0xD9, 0x7D, 0xE3,
            0x6A, 0xB8, 0x78, 0x6A, 0xAB, 0x50,
            0x96
        }
    },
    {
        "passDATAb00AB7YxDTTlR",
        "saltKEYbcTcXHCBxtjD2P",
        1,
        {
            0xA6, 0xAC, 0x8C, 0x04, 0x8A, 0x7D, 0xFD, 0x7B, 0x83, 0x8D, 0xA8, 0x8F, 0x22, 0xC3, 0xFA, 0xB5, 0xBF, 0xF1, 0x5D,
            0x7C, 0xB8, 0xD8, 0x3A, 0x62, 0xC6, 0x72, 0x1A, 0x8F, 0xAF, 0x69, 0x03, 0xEA, 0xB6, 0x15, 0x2C, 0xB7, 0x42, 0x10,
            0x26, 0xE3, 0x6F, 0x2F, 0xFE, 0xF6, 0x61, 0xEB, 0x43, 0x84, 0xDC, 0x27, 0x64, 0x95, 0xC7, 0x1B, 0x5C, 0xAB, 0x72,
            0xE1, 0xC1, 0xA3, 0x87, 0x12, 0xE5,
            0x6B
        }
    },
    {
        "passDATAb00AB7YxDTTlR",
        "saltKEYbcTcXHCBxtjD2P",
        100000,
        {
            0x94, 0xFF, 0xC2, 0xB1, 0xA3, 0x90, 0xB7, 0xB8, 0xA9, 0xE6, 0xA4, 0x49, 0x22, 0xC3, 0x30, 0xDB, 0x2B, 0x19, 0x3A,
            0xDC, 0xF0, 0x82, 0xEE, 0xCD, 0x06, 0x05, 0x71, 0x97, 0xF3, 0x59, 0x31, 0xA9, 0xD0, 0xEC, 0x0E, 0xE5, 0xC6, 0x60,
            0x74, 0x4B, 0x50, 0xB6, 0x1F, 0x23, 0x11, 0x9B, 0x84, 0x7E, 0x65, 0x8D, 0x17, 0x9A, 0x91, 0x48, 0x07, 0xF4, 0xB8,
            0xAB, 0x8E, 0xB9, 0x50, 0x5A, 0xF0,
            0x65
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE5",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJe",
        1,
        {
            0xE2, 0xCC, 0xC7, 0x82, 0x7F, 0x1D, 0xD7, 0xC3, 0x30, 0x41, 0xA9, 0x89, 0x06, 0xA8, 0xFD, 0x7B, 0xAE, 0x19, 0x20,
            0xA5, 0x5F, 0xCB, 0x8F, 0x83, 0x16, 0x83, 0xF1, 0x4F, 0x1C, 0x39, 0x79, 0x35, 0x1C, 0xB8, 0x68, 0x71, 0x7E, 0x5A,
            0xB3, 0x42, 0xD9, 0xA1, 0x1A, 0xCF, 0x0B, 0x12, 0xD3, 0x28, 0x39, 0x31, 0xD6, 0x09, 0xB0, 0x66, 0x02, 0xDA, 0x33,
            0xF8, 0x37, 0x7D, 0x1F, 0x1F, 0x99,
            0x02
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE5",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJe",
        100000,
        {
            0x07, 0x44, 0x74, 0x01, 0xC8, 0x57, 0x66, 0xE4, 0xAE, 0xD5, 0x83, 0xDE, 0x2E, 0x6B, 0xF5, 0xA6, 0x75, 0xEA, 0xBE,
            0x4F, 0x36, 0x18, 0x28, 0x1C, 0x95, 0x61, 0x6F, 0x4F, 0xC1, 0xFD, 0xFE, 0x6E, 0xCB, 0xC1, 0xC3, 0x98, 0x27, 0x89,
            0xD4, 0xFD, 0x94, 0x1D, 0x65, 0x84, 0xEF, 0x53, 0x4A, 0x78, 0xBD, 0x37, 0xAE, 0x02, 0x55, 0x5D, 0x94, 0x55, 0xE8,
            0xF0, 0x89, 0xFD, 0xB4, 0xDF, 0xB6,
            0xBB
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJem",
        1,
        {
            0xB0, 0x29, 0xA5, 0x51, 0x11, 0x7F, 0xF3, 0x69, 0x77, 0xF2, 0x83, 0xF5, 0x79, 0xDC, 0x70, 0x65, 0xB3, 0x52, 0x26,
            0x6E, 0xA2, 0x43, 0xBD, 0xD3, 0xF9, 0x20, 0xF2, 0x4D, 0x4D, 0x14, 0x1E, 0xD8, 0xB6, 0xE0, 0x2D, 0x96, 0xE2, 0xD3,
            0xBD, 0xFB, 0x76, 0xF8, 0xD7, 0x7B, 0xA8, 0xF4, 0xBB, 0x54, 0x89, 0x96, 0xAD, 0x85, 0xBB, 0x6F, 0x11, 0xD0, 0x1A,
            0x01, 0x5C, 0xE5, 0x18, 0xF9, 0xA7,
            0x17
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJem",
        100000,
        {
            0x31, 0xF5, 0xCC, 0x83, 0xED, 0x0E, 0x94, 0x8C, 0x05, 0xA1, 0x57, 0x35, 0xD8, 0x18, 0x70, 0x3A, 0xAA, 0x7B, 0xFF,
            0x3F, 0x09, 0xF5, 0x16, 0x9C, 0xAF, 0x5D, 0xBA, 0x66, 0x02, 0xA0, 0x5A, 0x4D, 0x5C, 0xFF, 0x55, 0x53, 0xD4, 0x2E,
            0x82, 0xE4, 0x05, 0x16, 0xD6, 0xDC, 0x15, 0x7B, 0x8D, 0xAE, 0xAE, 0x61, 0xD3, 0xFE, 0xA4, 0x56, 0xD9, 0x64, 0xCB,
            0x2F, 0x7F, 0x9A, 0x63, 0xBB, 0xBD,
            0xB5
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57U",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemk",
        1,
        {
            0x28, 0xB8, 0xA9, 0xF6, 0x44, 0xD6, 0x80, 0x06, 0x12, 0x19, 0x7B, 0xB7, 0x4D, 0xF4, 0x60, 0x27, 0x2E, 0x22, 0x76,
            0xDE, 0x8C, 0xC0, 0x7A, 0xC4, 0x89, 0x7A, 0xC2, 0x4D, 0xBC, 0x6E, 0xB7, 0x74, 0x99, 0xFC, 0xAF, 0x97, 0x41, 0x52,
            0x44, 0xD9, 0xA2, 0x9D, 0xA8, 0x3F, 0xC3, 0x47, 0xD0, 0x9A, 0x5D, 0xBC, 0xFD, 0x6B, 0xD6, 0x3F, 0xF6, 0xE4, 0x10,
            0x80, 0x3D, 0xCA, 0x8A, 0x90, 0x0A,
            0xB6
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57U",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemk",
        100000,
        {
            0x05, 0x6B, 0xC9, 0x07, 0x2A, 0x35, 0x6B, 0x7D, 0x4D, 0xA6, 0x0D, 0xD6, 0x6F, 0x59, 0x68, 0xC2, 0xCA, 0xA3, 0x75,
            0xC0, 0x22, 0x0E, 0xDA, 0x6B, 0x47, 0xEF, 0x8E, 0x8D, 0x10, 0x5E, 0xD6, 0x8B, 0x44, 0x18, 0x5F, 0xE9, 0x00, 0x3F,
            0xBB, 0xA4, 0x9E, 0x2C, 0x84, 0x24, 0x0C, 0x9E, 0x8F, 0xD3, 0xF5, 0xB2, 0xF4, 0xF6, 0x51, 0x2F, 0xD9, 0x36, 0x45,
            0x02, 0x53, 0xDB, 0x37, 0xD1, 0x00,
            0x28
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi0",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy",
        1,
        {
            0x16, 0x22, 0x6C, 0x85, 0xE4, 0xF8, 0xD6, 0x04, 0x57, 0x30, 0x08, 0xBF, 0xE6, 0x1C, 0x10, 0xB6, 0x94, 0x7B, 0x53,
            0x99, 0x04, 0x50, 0x61, 0x2D, 0xD4, 0xA3, 0x07, 0x7F, 0x7D, 0xEE, 0x21, 0x16, 0x22, 0x9E, 0x68, 0xEF, 0xD1, 0xDF,
            0x6D, 0x73, 0xBD, 0x3C, 0x6D, 0x07, 0x56, 0x77, 0x90, 0xEE, 0xA1, 0xE8, 0xB2, 0xAE, 0x9A, 0x1B, 0x04, 0x6B, 0xE5,
            0x93, 0x84, 0x7D, 0x94, 0x41, 0xA1,
            0xB7
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi0",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy",
        100000,
        {
            0x70, 0xCF, 0x39, 0xF1, 0x4C, 0x4C, 0xAF, 0x3C, 0x81, 0xFA, 0x28, 0x8F, 0xB4, 0x6C, 0x1D, 0xB5, 0x2D, 0x19, 0xF7,
            0x27, 0x22, 0xF7, 0xBC, 0x84, 0xF0, 0x40, 0x67, 0x6D, 0x33, 0x71, 0xC8, 0x9C, 0x11, 0xC5, 0x0F, 0x69, 0xBC, 0xFB,
            0xC3, 0xAC, 0xB0, 0xAB, 0x9E, 0x92, 0xE4, 0xEF, 0x62, 0x27, 0x27, 0xA9, 0x16, 0x21, 0x95, 0x54, 0xB2, 0xFA, 0x12,
            0x1B, 0xED, 0xDA, 0x97, 0xFF, 0x33,
            0x32
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6",
        1,
        {
            0x88, 0x0C, 0x58, 0xC3, 0x16, 0xD3, 0xA5, 0xB9, 0xF0, 0x59, 0x77, 0xAB, 0x9C, 0x60, 0xC1, 0x0A, 0xBE, 0xEB, 0xFA,
            0xD5, 0xCE, 0x89, 0xCA, 0xE6, 0x29, 0x05, 0xC1, 0xC4, 0xF8, 0x0A, 0x0A, 0x09, 0x8D, 0x82, 0xF9, 0x53, 0x21, 0xA6,
            0x22, 0x0F, 0x8A, 0xEC, 0xCF, 0xB4, 0x5C, 0xE6, 0x10, 0x71, 0x40, 0x89, 0x9E, 0x8D, 0x65, 0x53, 0x06, 0xAE, 0x63,
            0x96, 0x55, 0x3E, 0x28, 0x51, 0x37,
            0x6C
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6",
        100000,
        {
            0x26, 0x68, 0xB7, 0x1B, 0x3C, 0xA5, 0x61, 0x36, 0xB5, 0xE8, 0x7F, 0x30, 0xE0, 0x98, 0xF6, 0xB4, 0x37, 0x1C, 0xB5,
            0xED, 0x95, 0x53, 0x7C, 0x7A, 0x07, 0x3D, 0xAC, 0x30, 0xA2, 0xD5, 0xBE, 0x52, 0x75, 0x6A, 0xDF, 0x5B, 0xB2, 0xF4,
            0x32, 0x0C, 0xB1, 0x1C, 0x4E, 0x16, 0xB2, 0x49, 0x65, 0xA9, 0xC7, 0x90, 0xDE, 0xF0, 0xCB, 0xC6, 0x29, 0x06, 0x92,
            0x0B, 0x4F, 0x2E, 0xB8, 0x4D, 0x1D,
            0x4A
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04U",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6P",
        1,
        { 0x93, 0xB9, 0xBA, 0x82, 0x83, 0xCC, 0x17, 0xD5, 0x0E, 0xF3, 0xB4, 0x48, 0x20, 0x82, 0x8A, 0x25, 0x8A, 0x99, 0x6D,
          0xE2, 0x58, 0x22, 0x5D, 0x24, 0xFB, 0x59, 0x99, 0x0A, 0x6D, 0x0D, 0xE8, 0x2D, 0xFB, 0x3F, 0xE2, 0xAC, 0x20, 0x19,
          0x52, 0x10, 0x0E, 0x4C, 0xC8, 0xF0, 0x6D, 0x88, 0x3A, 0x91, 0x31, 0x41, 0x9C, 0x0F, 0x6F, 0x5A, 0x6E, 0xCB, 0x8E,
          0xC8, 0x21, 0x54, 0x5F, 0x14, 0xAD,
          0xF1 }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04U",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6P",
        100000,
        {
            0x25, 0x75, 0xB4, 0x85, 0xAF, 0xDF, 0x37, 0xC2, 0x60, 0xB8, 0xF3, 0x38, 0x6D, 0x33, 0xA6, 0x0E, 0xD9, 0x29, 0x99,
            0x3C, 0x9D, 0x48, 0xAC, 0x51, 0x6E, 0xC6, 0x6B, 0x87, 0xE0, 0x6B, 0xE5, 0x4A, 0xDE, 0x7E, 0x7C, 0x8C, 0xB3, 0x41,
            0x7C, 0x81, 0x60, 0x3B, 0x08, 0x0A, 0x8E, 0xEF, 0xC5, 0x60, 0x72, 0x81, 0x11, 0x29, 0x73, 0x7C, 0xED, 0x96, 0x23,
            0x6B, 0x93, 0x64, 0xE2, 0x2C, 0xE3,
            0xA5
        }
    },
    {
        "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",
        1,
        {
            0x38, 0x4B, 0xCD, 0x69, 0x14, 0x40, 0x7E, 0x40, 0xC2, 0x95, 0xD1, 0x03, 0x7C, 0xF4, 0xF9, 0x90, 0xE8, 0xF0, 0xE7,
            0x20, 0xAF, 0x43, 0xCB, 0x70, 0x66, 0x83, 0x17, 0x70, 0x16, 0xD3, 0x6D, 0x1A, 0x14, 0xB3, 0xA7, 0xCF, 0x22, 0xB5,
            0xDF, 0x8D, 0x5D, 0x7D, 0x44, 0xD6, 0x96, 0x10, 0xB6, 0x42, 0x51, 0xAD, 0xE2, 0xE7, 0xAB, 0x54, 0xA3, 0x81, 0x3A,
            0x89, 0x93, 0x55, 0x92, 0xE3, 0x91, 0xBF
        }
    },
    {
        "passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04Uz3ebEAhzZ4ve1A2wg5CnLXdZC5Y7gwfVgbEgZSTmoYQSzC5OW4dfrjqiwApTACO6xoOL1AjWj6X6f6qFfF8TVmOzU9RhOd1N4QtzWI4fP6FYttNz5FuLdtYVXWVXH2Tf7I9fieMeWCHTMkM4VcmQyQHpbcP8MEb5f1g6Ckg5xk3HQr3wMBvQcOHpCPy1K8HCM7a5wkPDhgVA0BVmwNpsRIbDQZRtHK6dT6bGyalp6gbFZBuBHwD86gTzkrFY7HkOVrgc0gJcGJZe65Ce8v4Jn5OzkuVsiU8efm2Pw2RnbpWSAr7SkVdCwXK2XSJDQ5fZ4HBEz9VTFYrG23ELuLjvx5njOLNgDAJuf5JB2tn4nMjjcnl1e8qcYVwZqFzEv2zhLyDWMkV4tzl4asLnvyAxTBkxPRZj2pRABWwb3kEofpsHYxMTAn38YSpZreoXipZWBnu6HDURaruXaIPYFPYHl9Ls9wsuD7rzaGfbOyfVgLIGK5rODphwRA7lm88bGKY8b7tWOtepyEvaLxMI7GZF5ScwpZTYeEDNUKPzvM2Im9zehIaznpguNdNXNMLWnwPu4H6zEvajkw3G3ucSiXKmh6XNe3hkdSANm3vnxzRXm4fcuzAx68IElXE2bkGFElluDLo6EsUDWZ4JIWBVaDwYdJx8uCXbQdoifzCs5kuuClaDaDqIhb5hJ2WR8mxiueFsS0aDGdIYmye5svmNmzQxFmdOkHoF7CfwuU1yy4uEEt9vPSP2wFp1dyaMvJW68vtB4kddLmI6gIgVVcT6ZX1Qm6WsusPrdisPLB2ScodXojCbL3DLj6PKG8QDVMWTrL1TpafT2wslRledWIhsTlv2mI3C066WMcTSwKLXdEDhVvFJ6ShiLKSN7gnRrlE0BnAw",
        "saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6PlBdILBOkKUB6TGTPJXh1tpdOHTG6KuIvcbQp9qWjaf1uxAKgiTtYRIHhxjJI2viVa6fDZ67QOouOaf2RXQhpsWaTtAVnff6PIFcvJhdPDFGV5nvmZWoCZQodj6yXRDHPw9PyF0iLYm9uFtEunlAAxGB5qqea4X5tZvB1OfLVwymY3a3JPjdxTdvHxCHbqqE0zip61JNqdmeWxGtlRBC6CGoCiHO4XxHCntQBRJDcG0zW7joTdgtTBarsQQhlLXBGMNBSNmmTbDf3hFtawUBCJH18IAiRMwyeQJbJ2bERsY3MVRPuYCf4Au7gN72iGh1lRktSQtEFye7pO46kMXRrEjHQWXInMzzy7X2StXUzHVTFF2VdOoKn0WUqFNvB6PF7qIsOlYKj57bi1Psa34s85WxMSbTkhrd7VHdHZkTVaWdraohXYOePdeEvIwObCGEXkETUzqM5P2yzoBOJSdjpIYaa8zzdLD3yrb1TwCZuJVxsrq0XXY6vErU4QntsW0972XmGNyumFNJiPm4ONKh1RLvS1kddY3nm8276S4TUuZfrRQO8QxZRNuSaZI8JRZp5VojB5DktuMxAQkqoPjQ5Vtb6oXeOyY591CB1MEW1fLTCs0NrL321SaNRMqza1ETogAxpEiYwZ6pIgnMmSqNMRdZnCqA4gMWw1lIVATWK83OCeicNRUNOdfzS7A8vbLcmvKPtpOFvhNzwrrUdkvuKvaYJviQgeR7snGetO9JLCwIlHIj52gMCNU18d32SJl7Xomtl3wIe02SMvq1i1BcaX7lXioqWGmgVqBWU3fsUuGwHi6RUKCCQdEOBfNo2WdpFaCflcgnn0O6jVHCqkv8cQk81AqS00rAmHGCNTwyA6Tq5TXoLlDnC8gAQjDUsZp0z",
        100000,
        {
            0xB8, 0x67, 0x4F, 0x6C, 0x0C, 0xC9, 0xF8, 0xCF, 0x1F, 0x18, 0x74, 0x53, 0x4F, 0xD5, 0xAF, 0x01, 0xFC, 0x15, 0x04,
            0xD7, 0x6C, 0x2B, 0xC2, 0xAA, 0x0A, 0x75, 0xFE, 0x4D, 0xD5, 0xDF, 0xD1, 0xDA, 0xF6, 0x0E, 0xA7, 0xC8, 0x5F, 0x12,
            0x2B, 0xCE, 0xEB, 0x87, 0x72, 0x65, 0x9D, 0x60, 0x12, 0x31, 0x60, 0x77, 0x26, 0x99, 0x8E, 0xAC, 0x3F, 0x6A, 0xAB,
            0x72, 0xEF, 0xF7, 0xBA, 0x34, 0x9F, 0x7F
        }
    }
};

TEST_CLASS(CryptoTest)
{
public:
    TEST_METHOD(Crypto_ripemd160)
    {
        for (auto const & c : RIPEMD160_CASES)
        {
            Ripemd160Hash result = Crypto::ripemd160((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"ripemd160", c.input, c.expected, sizeof(c.expected), &result[0],
                                            result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_sha256)
    {
        for (auto const & c : SHA256_CASES)
        {
            Sha256Hash result = Crypto::sha256((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"sha256", c.input, c.expected, sizeof(c.expected), &result[0], result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_doubleSha256)
    {
        for (auto const & c : DOUBLE_SHA256_CASES)
        {
            Sha256Hash result = Crypto::doubleSha256((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"doubleSha256", c.input, c.expected, sizeof(c.expected), &result[0],
                                            result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_sha1)
    {
        for (auto const & c : SHA1_CASES)
        {
            Sha1Hash result = Crypto::sha1((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"sha1", c.input, c.expected, sizeof(c.expected), &result[0], result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_checksum)
    {
        for (auto const & c : DOUBLE_SHA256_CASES)
        {
            Checksum result = Crypto::checksum((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"checksum", c.input, c.expected, CHECKSUM_SIZE, &result[0], result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_sha512)
    {
        for (auto const & c : SHA512_CASES)
        {
            Sha512Hash result = Crypto::sha512((uint8_t const *)c.input, strlen(c.input));
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hashErrorMessage(L"sha512", c.input, c.expected, sizeof(c.expected), &result[0], result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_hmacsha512)
    {
        for (auto const & c : HMACSHA512_CASES)
        {
            std::vector<uint8_t> key = fromHex(c.key, strlen(c.key));
            std::vector<uint8_t> message = fromHex(c.message, strlen(c.message));
            Sha512Hash result = Crypto::hmacSha512(key.data(), key.size(), message.data(), message.size());
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           hmacErrorMessage(L"hmacSha512",
                                            c.key,
                                            c.message,
                                            c.expected, sizeof(c.expected),
                                            &result[0], result.size()).c_str());
        }
    }

    TEST_METHOD(Crypto_pbkdf2HmacSha512)
    {
//         struct Pbkdf2HmacSha512TestCase
//         {
//             char const * password;
//             char const * salt;
//             int count;
//             unsigned char expected[64];
//         };
//         std::vector<uint8_t> pbkdf2HmacSha512(std::vector<uint8_t> const & password,
//             std::vector<uint8_t> const & salt,
//             int count,
//             size_t size);

        for (auto const & c : PBKDF2HMACSHA512_CASES)
        {
            std::vector<uint8_t> password(c.password, c.password + strlen(c.password));
            std::vector<uint8_t> salt(c.salt, c.salt + strlen(c.salt));
            std::vector<uint8_t> result = Crypto::pbkdf2HmacSha512(password, salt, c.count, 64);
            Assert::IsTrue(std::equal(result.begin(), result.end(), c.expected),
                           pbkdf2ErrorMessage(L"pbkdf2HmacSha512",
                                              c.password,
                                              c.salt,
                                              c.count,
                                              c.expected, sizeof(c.expected),
                                              &result[0], result.size()).c_str());
        }
    }

    static std::wstring hashErrorMessage(wchar_t const * test,
                                         char const *    input,
                                         uint8_t const * expected,
                                         size_t          expectedSize,
                                         uint8_t const * actual,
                                         size_t          actualSize)
    {
        std::wostringstream message;
        message
            << test
            << L"(\""
            << ToString(shorten(input))
            << L"\"): expected "
            << ToString(toHex(expected, expectedSize))
            << ", got "
            << ToString(toHex(actual, actualSize));
        return message.str();
    }

    static std::wstring hmacErrorMessage(wchar_t const * test,
                                         char const *    key,
                                         char const *    data,
                                         uint8_t const * expected,
                                         size_t          expectedSize,
                                         uint8_t const * actual,
                                         size_t          actualSize)
    {
        std::wostringstream message;
        message
            << test
            << L"(\""
            << ToString(shorten(key))
            << L"\", \""
            << ToString(shorten(data))
            << L"\"): expected "
            << ToString(toHex(expected, expectedSize))
            << ", got "
            << ToString(toHex(actual, actualSize));
        return message.str();
    }

    static std::wstring pbkdf2ErrorMessage(wchar_t const * test,
                                           char const *    password,
                                           char const *    salt,
                                           int             count,
                                           uint8_t const * expected,
                                           size_t          expectedSize,
                                           uint8_t const * actual,
                                           size_t          actualSize)
    {
        std::wostringstream message;
        message
            << test
            << L"(\""
            << ToString(shorten(password))
            << L"\", \""
            << ToString(shorten(salt))
            << L"\""
            << count
            << "): expected "
            << ToString(toHex(expected, expectedSize))
            << ", got "
            << ToString(toHex(actual, actualSize));
        return message.str();
    }

};

} // namespace TestCrypto
